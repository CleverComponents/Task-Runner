unit uPSI_JobParams;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JobParams = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJobParam(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractJobParam(CL: TPSPascalCompiler);
procedure SIRegister_JobParams(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJobParam(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractJobParam(CL: TPSRuntimeClassImporter);
procedure RIRegister_JobParams(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   JobParams
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JobParams]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJobParam(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAbstractJobParam', 'TJobParam') do
  with CL.AddClassN(CL.FindClass('TAbstractJobParam'),'TJobParam') do
  begin
    RegisterMethod('Procedure AddText( const AText : string)');
    RegisterProperty('Value', 'string', iptrw);
    RegisterProperty('IndexValue', 'string Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractJobParam(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAbstractJobParam') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractJobParam') do
  begin
    RegisterMethod('Procedure TestSetParams( const AName : string)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JobParams(CL: TPSPascalCompiler);
begin
  SIRegister_TAbstractJobParam(CL);
  SIRegister_TJobParam(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJobParamIndexValue_W(Self: TJobParam; const T: string; const t1: Integer);
begin Self.IndexValue[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJobParamIndexValue_R(Self: TJobParam; var T: string; const t1: Integer);
begin T := Self.IndexValue[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJobParamValue_W(Self: TJobParam; const T: string);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TJobParamValue_R(Self: TJobParam; var T: string);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJobParam(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJobParam) do
  begin
    RegisterMethod(@TJobParam.AddText, 'AddText');
    RegisterPropertyHelper(@TJobParamValue_R,@TJobParamValue_W,'Value');
    RegisterPropertyHelper(@TJobParamIndexValue_R,@TJobParamIndexValue_W,'IndexValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractJobParam(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractJobParam) do
  begin
    RegisterVirtualMethod(@TAbstractJobParam.TestSetParams, 'TestSetParams');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JobParams(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAbstractJobParam(CL);
  RIRegister_TJobParam(CL);
end;

 
 
{ TPSImport_JobParams }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JobParams.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JobParams(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JobParams.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JobParams(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
