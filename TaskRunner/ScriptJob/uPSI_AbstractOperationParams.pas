unit uPSI_AbstractOperationParams;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_AbstractOperationParams = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TAbstractOperationParams(CL: TPSPascalCompiler);
procedure SIRegister_AbstractOperationParams(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAbstractOperationParams(CL: TPSRuntimeClassImporter);
procedure RIRegister_AbstractOperationParams(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   AbstractOperationParams
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_AbstractOperationParams]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractOperationParams(CL: TPSPascalCompiler);
begin
  with CL.AddClass(CL.FindClass('TOBJECT'),TAbstractOperationParams) do
  begin
    RegisterPublishedProperties;
    RegisterMethod('Procedure SetParam( const AName, AValue : string)');
    RegisterMethod('Function GetParam( const AName : string) : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_AbstractOperationParams(CL: TPSPascalCompiler);
begin
  SIRegister_TAbstractOperationParams(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractOperationParams(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractOperationParams) do
  begin
    RegisterVirtualMethod(@TAbstractOperationParams.SetParam, 'SetParam');
    RegisterVirtualMethod(@TAbstractOperationParams.GetParam, 'GetParam');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_AbstractOperationParams(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAbstractOperationParams(CL);
end;

 
 
{ TPSImport_AbstractOperationParams }
(*----------------------------------------------------------------------------*)
procedure TPSImport_AbstractOperationParams.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_AbstractOperationParams(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_AbstractOperationParams.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_AbstractOperationParams(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
